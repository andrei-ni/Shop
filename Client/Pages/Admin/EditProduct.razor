@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject ISubCategoryService SubCategoryService
@inject ICategoryService CategoryService
@inject NavigationManager _nav
@using TinyMCE.Blazor
@attribute [Authorize(Roles = "Admin")]

<br />

@if (loading)
{
    <span>@msg</span>
    <br />
}
else
{
    @if (product.Editing)
    {
        <h3>Modifica "@product.Name"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Creeaza un produs</h3>
    }

    <div class="mb-0">
        <label for="description">Descriere (Minim 100 caractere)</label>
        <Editor ApiKey="760c057lz3f2k9ylpx4z37vy04wavbxpejqo3yasj25gw9a7" @bind-Value="@product.Description" />
    </div>

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">

        <DataAnnotationsValidator />
        <div class="mb-0">
            <label for="name">Nume</label>
            <InputText id="name" @bind-Value="@product.Name" class="form-control"></InputText>
            <ValidationMessage For="@(()=> product.Name)" />
        </div>
        <div class="mb-0">
            <label for="imageUrl">Imagine</label>
            <InputText id="imageUrl" @bind-Value="@product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display:flex;flex-wrap:wrap;flex-direction:row;justify-content:start">
            @if(product.Images.Count() == 0)
            {
                product.ImageUrl = string.Empty;
            }
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                foreach (var image in product.Images)
                {
                    <img src="@image.Data" />
                    <button type="button" class="btn" style="border-radius: 5px;"
                    @onclick="(() => RemoveImage(image.Id))"> Sterge
                    </button>
                }
            }

        </div>

        <div class="mb-0">
            <label for="images">Imagini</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>

        @*<div class="mb-0">
    <label for="description">Descriere</label>
    <InputTextArea id="description" @bind-Value="@product.Description" class="form-control"></InputTextArea>
    </div>*@

        <div class="mb-0">
            <label for="price">Pret (Daca pretul e mai mic se aplica Discount)</label>
            <InputNumber id="price" @bind-Value="@product.Price" class="form-control"></InputNumber>
            <ValidationMessage For="@(()=> product.Price)" />

        </div>
        <div class="mb-0">
            <label for="originalPrice">Pret Original (Fara Discount)</label>
            <InputNumber id="originalPrice" @bind-Value="@product.OriginalPrice" class="form-control"></InputNumber>
            <ValidationMessage For="@(()=> product.OriginalPrice)" />
        </div>
        <div class="mb-0">
            <label for="stock">Stoc</label>
            <InputNumber id="stock" @bind-Value="@product.Stock" class="form-control"></InputNumber>
        </div>
        <div class="mb-0">
            <label for="subcategory">Subcategorie</label>
        <InputSelect id="subcategory" @bind-Value="@product.SubCategoryId" class="form-control" @onclick="(()=>selected = true)">
                @foreach (var sc in SubCategoryService.AdminSubCategories)
                {
                    <option value="@sc.Id">@sc.Name</option>
                }
            </InputSelect>
            <span style="color:red;">@scMessage</span>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="@product.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Produse recomandate</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="@product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Vizibil pe site</label>
        </div>
        <hr />

        <button type="submit" class="btn btn-primary float-end" style="border-radius: 5px;">@btnText</button>

        <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4" style="border: 6px solid #1BCC21; width: 350px;">
            <div class="d-flex flex-column">
                <MudText>Produsul a fost adaugat.</MudText>
                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Inchide</MudButton>
            </div>
        </MudPopover>

        <ValidationSummary />
    </EditForm>

}

@if (!product.IsNew)
{
    <button class="btn btn-danger" style="border-radius: 5px;" @onclick="Show">
        <i class="bi bi-trash" id="icon"></i>&nbsp; Sterge produs
    </button>
    <button type="button" hidden="@show" class="btn btn-danger" style="border-radius: 5px;" @onclick="DeleteProduct">
        <i class="bi bi-check-circle-fill"></i>&nbsp; Esti sigur?
    </button>
}
<br />
<br />
<br />


@code {
    [Parameter]
    public int Id { get; set; }
    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Se incarca...";

    public bool _isOpen; //@onclick="@ToggleOpen"
    public bool selected = false;
    public string scMessage = string.Empty;

    public void ToggleOpen()
    {

        if (_isOpen)
        {
            _isOpen = false;
        }
        else
        {
            _isOpen = true;
        }
    }

    public bool show = true;
    public void Show()
    {

        show = !show;

    }

    protected override async Task OnInitializedAsync()
    {
        await SubCategoryService.GetAdminSubCategoriesAsync();
        await CategoryService.GetAdminCategoriesAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Creeaza produs";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data!;
            if (dbProduct == null)
            {
                msg = $"Produsul cu Id '{Id}' nu exista.";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Actualizeaza produs";
        }
        loading = false;
    }
    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            if (selected != false)
            {
                _isOpen = true;
                var result = await ProductService.CreateProduct(product);
                _nav.NavigateTo($"admin/product/{result.Id}");
            }
            else
            {
                scMessage = "Subcategoria este obligatorie";
            }
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            _nav.NavigateTo($"admin/product/{product.Id}", true);
        }
    }
    async void DeleteProduct()
    {
        await ProductService.DeleteProduct(product);
        show = !show;
        _nav.NavigateTo("admin/products/1");
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/jpeg";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 550, 550);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
            product.ImageUrl = product.Images[0].Data;

        }

    }

    void RemoveImage(int id)
    {
        var images = product.Images.FirstOrDefault(i => i.Id == id);

        if (images != null)
        {
            product.Images.Remove(images);
        }
    }

}
