@page "/admin/subcategories"
@inject ISubCategoryService SubCategoryservice
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<PageTitle>Subcategorii DrPrint</PageTitle>
<br />
<h3>Subcategorii</h3>

<br />
<div class="header">
	<div class="col">ID Subcategorie</div>
	<div class="col">ID Categorie</div>
	<div class="col">Nume</div>
	<div class="col">Url</div>
	<div class="col">Descriere</div>
	<div class="col">Vizibil</div>
	<div class="col"></div>
</div>

@foreach (var sc in SubCategoryservice.AdminSubCategories)
{
	@if (sc.Editing)
	{
		<EditForm Model="editingSubCategory" OnSubmit="UpdateSubCategory">
			<div class="row">
				<div class="col-1">
					@sc.Id
				</div>
				@*<div class="col">
					<InputNumber @bind-Value="editingSubCategory.CategoryId" class="form-control"></InputNumber>
				</div>*@
				<div class="col">
					<InputSelect id="category" @bind-Value="@sc.CategoryId" class="form-control">
						@foreach (var category in CategoryService.Categories)
						{
							<option value="@category.Id">@category.Name</option>
						}
					</InputSelect>
				</div>
				<div class="col">
					<InputText @bind-Value="editingSubCategory.Name" class="form-control"></InputText>
				</div>
				<div class="col">
					<InputText @bind-Value="editingSubCategory.Url" class="form-control"></InputText>
				</div>
				<div class="col">
					<InputTextArea @bind-Value="editingSubCategory.Description" class="form-control"></InputTextArea>
				</div>
				<div class="col col-visible">
					<InputCheckbox @bind-Value="editingSubCategory.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
				</div>
				<div class="col">
					<button type="submit" class="btn btn-success" style="border-radius: 5px;">
						<i class="bi bi-check2-circle"></i>
					</button>
					<button class="btn btn-secondary" style="border-radius: 5px;" @onclick="CancelEditing">
						<i class="bi bi-x-circle"></i>
					</button>
				</div>
			</div>
		</EditForm>
	}
	else
	{
		<div class="row">
			<div class="col-1">
				@sc.Id
			</div>
			<div class="col-1">
				@sc.CategoryId
			</div>
			<div class="col">
				@sc.Name
			</div>
			<div class="col">
				@sc.Url
			</div>
			<div class="col">
				@sc.Description
			</div>
			<div class="col col-visible">
				<span>@(sc.Visible ? "✔️" : "❌")</span>
			</div>
			<div class="col">
				<button class="btn btn-primary" style="border-radius: 5px;" @onclick="(() => EditSubCategory(sc))">
					<i class="bi bi-pencil"></i>
				</button>
				<button class="btn btn-danger" style="border-radius: 5px;" @onclick="Show">
					<i class="bi bi-trash"></i>
				</button>
				<button hidden="@show" class="btn  btn-danger" style="border-radius: 5px;" @onclick="(() => DeleteSubCategory(sc.Id))">
					<i class="bi bi-check-circle-fill"></i>
				</button>
			</div>
		</div>
	}
}

<button class="btn btn-primary" style="border-radius: 5px;" @onclick="CreateNewSubCategory">
	<i class="bi bi-plus"></i> &ensp;Adauga subcategorie
</button>

<hr />

@code {
	SubCategory editingSubCategory = null !;
	public bool show = true;
	public void Show()
	{

		show = !show;

	}
	protected override async Task OnInitializedAsync()
	{
		await CategoryService.GetCategoriesAsync();
		await SubCategoryservice.GetAdminSubCategoriesAsync();
		SubCategoryservice.OnChange += StateHasChanged;
	}
	public void Dispose()
	{
		SubCategoryservice.OnChange -= StateHasChanged;
	}

	private void CreateNewSubCategory()
	{
		editingSubCategory = SubCategoryservice.CreateNewSubCategory();
	}
	private void EditSubCategory(SubCategory subCategory)
	{
		subCategory.Editing = true;
		editingSubCategory = subCategory;
	}
	private async Task UpdateSubCategory()
	{
		if (editingSubCategory.IsNew)
		{
			await SubCategoryservice.AddSubCategory(editingSubCategory);
		}
		else
		{
			await SubCategoryservice.UpdateSubCategory(editingSubCategory);
		}
		editingSubCategory = new SubCategory();
	}

	private async Task CancelEditing()
	{
		editingSubCategory = new SubCategory();
		await SubCategoryservice.GetAdminSubCategoriesAsync();
	}

	private async Task DeleteSubCategory(int id)
	{
		await SubCategoryservice.DeleteSubCategory(id);
		show = !show;
	}
}
